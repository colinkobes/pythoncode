/*
 * Replace TBC with (empty) string
 * Replace Global with MT string
 */
SET SERVEROUTPUT ON;
DECLARE

    ----------
    -- CURSORS
    ----------

    CURSOR excel IS
        SELECT  row_nr,
                MAX(DECODE(col_nr, 2, TRIM(string_val), NULL)) "Area",
                MAX(DECODE(col_nr, 3, TRIM(string_val), NULL)) "Unique ID",
                MAX(DECODE(col_nr, 4, TRIM(string_val), NULL)) "Scope",
                MAX(DECODE(col_nr, 5, TRIM(string_val), NULL)) "Location Lab",
                MAX(DECODE(col_nr, 6, TRIM(string_val), NULL)) "Location LabECX",
                MAX(DECODE(col_nr, 7, TRIM(string_val), NULL)) "Location PreProd",
                MAX(DECODE(col_nr, 8, TRIM(string_val), NULL)) "Location Prod",
                MAX(DECODE(col_nr, 9, TRIM(string_val), NULL)) "Applicable Environments",
                MAX(DECODE(col_nr, 10, TRIM(string_val), NULL)) "Applicable Countries",
                MAX(DECODE(col_nr, 11, TRIM(string_val), NULL)) "Blueprint/Country Specific",
                MAX(DECODE(col_nr, 12, TRIM(string_val), NULL)) "NSA Level",
                MAX(DECODE(col_nr, 13, TRIM(string_val), NULL)) "Tenant",
                MAX(DECODE(col_nr, 14, TRIM(string_val), NULL)) "ADC",
                MAX(DECODE(col_nr, 15, TRIM(string_val), NULL)) "Type",
                MAX(DECODE(col_nr, 16, TRIM(string_val), NULL)) "Ports",
                MAX(DECODE(col_nr, 17, TRIM(string_val), NULL)) "Protocol",
                MAX(DECODE(col_nr, 18, TRIM(string_val), NULL)) "DSCP",
                MAX(DECODE(col_nr, 19, TRIM(string_val), NULL)) "Protocol Client",
                MAX(DECODE(col_nr, 20, TRIM(string_val), NULL)) "Protocol Server",
                MAX(DECODE(col_nr, 21, TRIM(string_val), NULL)) "HTTP Profile",
                MAX(DECODE(col_nr, 22, TRIM(string_val), NULL)) "SSL Profile (Client)",
                MAX(DECODE(col_nr, 23, TRIM(string_val), NULL)) "SSL Profile (Server)",
                MAX(DECODE(col_nr, 24, TRIM(string_val), NULL)) "VLAN and Tunnel Traffic",
                MAX(DECODE(col_nr, 25, TRIM(string_val), NULL)) "VLANs and Tunnels",
                MAX(DECODE(col_nr, 26, TRIM(string_val), NULL)) "SNAT",
                MAX(DECODE(col_nr, 27, TRIM(string_val), NULL)) "SNAT Pool",
                MAX(DECODE(col_nr, 28, TRIM(string_val), NULL)) "HTTP Analytics",
                MAX(DECODE(col_nr, 29, TRIM(string_val), NULL)) "TCP Analytics",
                MAX(DECODE(col_nr, 30, TRIM(string_val), NULL)) "iRules",
                MAX(DECODE(col_nr, 31, TRIM(string_val), NULL)) "Default Pool",
                MAX(DECODE(col_nr, 32, TRIM(string_val), NULL)) "Default Persistence",
                MAX(DECODE(col_nr, 33, TRIM(string_val), NULL)) "Acc OneConnect Profile",
                MAX(DECODE(col_nr, 34, TRIM(string_val), NULL)) "Firewall",
                MAX(DECODE(col_nr, 35, TRIM(string_val), NULL)) "Old VIP Name",
                MAX(DECODE(col_nr, 36, TRIM(string_val), NULL)) "EPG",
                MAX(DECODE(col_nr, 37, TRIM(string_val), NULL)) "Interface",
                MAX(DECODE(col_nr, 38, TRIM(string_val), NULL)) "IP Type",
                MAX(DECODE(col_nr, 39, TRIM(string_val), NULL)) "Global",
                MAX(DECODE(col_nr, 40, TRIM(string_val), NULL)) "OBOSI",
                MAX(DECODE(col_nr, 41, TRIM(string_val), NULL)) "5A",
                MAX(DECODE(col_nr, 42, TRIM(string_val), NULL)) "SS",
                MAX(DECODE(col_nr, 43, TRIM(string_val), NULL)) "CP",
                MAX(DECODE(col_nr, 44, TRIM(string_val), NULL)) "AT",
                MAX(DECODE(col_nr, 45, TRIM(string_val), NULL)) "BE",
                MAX(DECODE(col_nr, 46, TRIM(string_val), NULL)) "CH",
                MAX(DECODE(col_nr, 47, TRIM(string_val), NULL)) "CL",
                MAX(DECODE(col_nr, 48, TRIM(string_val), NULL)) "CZ",
                MAX(DECODE(col_nr, 49, TRIM(string_val), NULL)) "DE",
                MAX(DECODE(col_nr, 50, TRIM(string_val), NULL)) "HU",
                MAX(DECODE(col_nr, 51, TRIM(string_val), NULL)) "IE",
                MAX(DECODE(col_nr, 52, TRIM(string_val), NULL)) "NL",
                MAX(DECODE(col_nr, 53, TRIM(string_val), NULL)) "PL",
                MAX(DECODE(col_nr, 54, TRIM(string_val), NULL)) "RO",
                MAX(DECODE(col_nr, 55, TRIM(string_val), NULL)) "SK",
                MAX(DECODE(col_nr, 56, TRIM(string_val), NULL)) "UK",
                MAX(DECODE(col_nr, 57, TRIM(string_val), NULL)) "ODEP Tickets",
                MAX(DECODE(col_nr, 58, TRIM(string_val), NULL)) "Release"
        FROM    TABLE
                (
                    as_read_xlsx.READ
                    (
                        as_read_xlsx.FILE2BLOB
                        (
                            'DOWNLOAD',                         -- Directory (Oracle CREATE DIRECTORY)`
                            'OBO_NewDesign_R4_11_3_0.xlsx'      -- File name
                        ),
                        '10' -- iLLD VIP
                    )
                )
        WHERE       row_nr NOT IN (1)
        GROUP BY    row_nr
        ORDER BY    row_nr;

    ------------
    -- VARIABLES
    ------------

    v_ip_address            VARCHAR2(40);
    v_tenant_id             tenants.tenant_id%TYPE;
    v_tenant_name           tenants.tenant_name%TYPE;
    v_environment_id        environments.environment_id%TYPE;
    v_environment_name      environments.environment_name%TYPE;
    v_vip_id                virtual_ip.vip_id%TYPE;
    v_scope_id              scopes.scope_id%TYPE;
    v_area_id               areas.area_id%TYPE;
    v_location_id           locations.location_id%TYPE;
    v_sp_id                 server_pools.sp_id%TYPE;
    v_adc_id                adc.adc_id%TYPE;
    v_network_protocol_id   network_protocols.network_protocol_id%TYPE;
    v_network_type_id       network_types.network_type_id%TYPE;
    v_country_id            countries.country_id%TYPE;
    v_datacenter_id         datacenters.datacenter_id%TYPE;
    v_physical_location_id  physical_locations.physical_location_id%TYPE;
    v_datacenter_name       datacenters.datacenter_name%TYPE;
    v_tem_code              tenant_environment_map.tem_code%TYPE;
    v_release_origin_id     releases.release_id%TYPE;

    ------------
    -- CONSTANTS
    ------------

    c_release_id                CONSTANT releases.release_id%TYPE                       := 25;                          -- Check releases table
    c_blueprint                 CONSTANT tenants.tenant_name%TYPE                       := 'Blueprint';                 -- Check tenants table
    c_multiple_environment      CONSTANT environments.environment_name%TYPE             := 'Multiple Environment';      -- Check environments table
    c_country_code              CONSTANT VARCHAR2(5)                                    := '<CT>';
    c_location_code             CONSTANT VARCHAR2(5)                                    := '<CC>';

BEGIN
    FOR rec IN excel
    LOOP
        -- Get Tenant
        SELECT  tenant_id
        INTO    v_tenant_id
        FROM    tenants
        WHERE   LOWER(tenant_name) = LOWER(c_blueprint);

        -- Get Environment
        SELECT  environment_id
        INTO    v_environment_id
        FROM    environments
        WHERE   LOWER(environment_name) = LOWER(c_multiple_environment);

        -- Get Release
        IF (TRIM(rec."Release") IS NOT NULL)
        THEN
            SELECT  release_id
            INTO    v_release_origin_id
            FROM    releases
            WHERE   LOWER(release_name) LIKE '%' || LOWER(TRIM(REPLACE(rec."Release", '.', '_'))) || '%';
        ELSE
            v_release_origin_id := NULL;
        END IF;

        -- Get Scope
        SELECT  scope_id
        INTO    v_scope_id
        FROM    scopes
        WHERE   LOWER(scope_name) = LOWER(TRIM(rec."Scope"));

        -- Get Area
        SELECT  area_id
        INTO    v_area_id
        FROM    areas
        WHERE   DECODE(LOWER(rec."Area"), LOWER(area_name), 1, 0) = 1;

        -- Get ADC
        BEGIN
            SELECT  adc_id
            INTO    v_adc_id
            FROM    adc
            WHERE   DECODE(LOWER(rec."ADC"), LOWER(adc_name), 1, 0) = 1;

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    -- If it is not an empty string then insert a new row
                    IF (TRIM(rec."ADC") IS NOT NULL)
                    THEN
                        INSERT INTO adc VALUES (NULL, rec."ADC")
                        RETURNING adc_id INTO v_adc_id;
                    END IF;
        END;

        -- Get Interface
        BEGIN
            SELECT  network_type_id
            INTO    v_network_type_id
            FROM    network_types
            WHERE   DECODE(LOWER(rec."Interface"), LOWER(network_type_name), 1, 0) = 1;
        END;

        -- Get Network Protocol
        BEGIN
            SELECT  network_protocol_id
            INTO    v_network_protocol_id
            FROM    network_protocols
            WHERE   LOWER(rec."Protocol") = LOWER(network_protocol_name);

            EXCEPTION
                WHEN NO_DATA_FOUND THEN
                    IF (TRIM(rec."Protocol") IS NULL)
                    THEN
                        v_network_protocol_id := NULL;
                    ELSE
                        DBMS_OUTPUT.PUT_LINE(rec.row_nr || ' ' || rec."Protocol");
                    END IF;
        END;

        -- Insert VIP for Blueprint
        INSERT INTO virtual_ip
        (
            vip_id,
            vip_name,
            vip_nsa_level,
            vip_core_tenant,
            vip_port,
            vip_type,
            vip_protocol_client,
            vip_protocol_server,
            vip_http_profile,
            vip_ssl_profile_client,
            vip_ssl_profile_server,
            vip_vlan_tunnel_traffic,
            vip_vlan_tunnel,
            vip_snat,
            vip_snat_pool,
            vip_http_analytics,
            vip_tcp_analytics,
            vip_irules,
            vip_default_persistence,
            vip_firewall,
            vip_old_name,
            vip_end_point_group,
            vip_ip_type,
            vip_ipv4_address,
            vip_ipv6_address,
            vip_dscp,
            vip_acc_one_connect_profile,
            vip_blueprint_architect,
            vip_ticket,
            vip_last_modified,
            vip_area,
            vip_location,
            vip_server_pool,
            vip_adc,
            vip_network_protocol,
            vip_network_type,
            vip_blueprint,
            vip_release,
            vip_release_origin,
            vip_tenant,
            vip_environment,
            vip_scope
        )
        VALUES
        (
            NULL,
            rec."Unique ID",
            rec."NSA Level",
            rec."Tenant",
            rec."Ports",
            rec."Type",
            rec."Protocol Client",
            rec."Protocol Server",
            rec."HTTP Profile",
            rec."SSL Profile (Client)",
            rec."SSL Profile (Server)",
            rec."VLAN and Tunnel Traffic",
            rec."VLANs and Tunnels",
            rec."SNAT",
            rec."SNAT Pool",
            rec."HTTP Analytics",
            rec."TCP Analytics",
            rec."iRules",
            rec."Default Persistence",
            rec."Firewall",
            rec."Old VIP Name",
            rec."EPG",
            rec."IP Type",
            NULL,
            NULL,
            rec."DSCP",
            rec."Acc OneConnect Profile",
            rec."Blueprint/Country Specific",
            rec."ODEP Tickets",
            SYSDATE(),
            v_area_id,
            NULL,                       -- Cannot assign multiple location to blueprint
            NULL,                       -- Will assign server pool during environment and tenant loop
            v_adc_id,
            v_network_protocol_id,
            v_network_type_id,
            NULL,
            c_release_id,
            v_release_origin_id,
            v_tenant_id,
            v_environment_id,
            v_scope_id
        )
        RETURNING vip_id INTO v_vip_id;

        FOR j IN
        (
            SELECT      regexp_substr(rec."Applicable Countries",'[^,]+', 1, level) "country"
            FROM        dual
            CONNECT BY  regexp_substr(rec."Applicable Countries",'[^,]+', 1, level) IS NOT NULL
        )
        LOOP
            FOR k IN
            (
                SELECT      regexp_substr(rec."Applicable Environments",'[^,]+', 1, level) "environment"
                FROM        dual
                CONNECT BY  regexp_substr(rec."Applicable Environments",'[^,]+', 1, level) IS NOT NULL
            )
            LOOP
                j."country"     := TRIM(j."country");
                k."environment" := TRIM(k."environment");

                -- Get Tenant
                SELECT  tenant_id
                INTO    v_tenant_id
                FROM    tenants
                WHERE   LOWER(tenant_name) = LOWER(TRIM(j."country"));

                -- Get Environment
                SELECT  environment_id
                INTO    v_environment_id
                FROM    environments
                WHERE   LOWER(environment_name) = LOWER(TRIM(k."environment"));

                -- Get Tenant Code
                SELECT  tem_code
                INTO    v_tem_code
                FROM    tenant_environment_map
                WHERE   tem_tenant              = v_tenant_id
                        AND tem_environment     = v_environment_id;

                -- Get IP Address from different columns
                CASE j."country"
                    WHEN 'MT' THEN      v_ip_address := rec."Global";
                    WHEN 'SI' THEN      v_ip_address := rec."OBOSI";
                    WHEN '5A' THEN      v_ip_address := rec."5A";
                    WHEN 'SS' THEN      v_ip_address := rec."SS";
                    WHEN 'CP' THEN      v_ip_address := rec."CP";
                    WHEN 'AT' THEN      v_ip_address := rec."AT";
                    WHEN 'BE' THEN      v_ip_address := rec."BE";
                    WHEN 'CH' THEN      v_ip_address := rec."CH";
                    WHEN 'CL' THEN      v_ip_address := rec."CL";
                    WHEN 'CZ' THEN      v_ip_address := rec."CZ";
                    WHEN 'DE' THEN      v_ip_address := rec."DE";
                    WHEN 'HU' THEN      v_ip_address := rec."HU";
                    WHEN 'IE' THEN      v_ip_address := rec."IE";
                    WHEN 'NL' THEN      v_ip_address := rec."NL";
                    WHEN 'PL' THEN      v_ip_address := rec."PL";
                    WHEN 'RO' THEN      v_ip_address := rec."RO";
                    WHEN 'SK' THEN      v_ip_address := rec."SK";
                    WHEN 'UK' THEN      v_ip_address := rec."UK";
                    ELSE
                        v_ip_address := NULL;
                END CASE;

                IF (LOWER(j."country") <> 'blueprint')
                THEN
                    -- Get Server Pools for Parent row
                    BEGIN
                        SELECT  DISTINCT sp_blueprint
                        INTO    v_sp_id
                        FROM    server_pools
                        WHERE   sp_blueprint IN
                        (
                            SELECT  sp_id
                            FROM    server_pools
                            WHERE   LOWER(sp_name)              = LOWER(rec."Default Pool")
                                    AND LOWER(sp_core_tenant)   = LOWER(rec."Tenant")
                                    AND sp_tenant               = 18
                                    AND sp_environment          = 5
                                    AND sp_release              = c_release_id
                                    AND sp_scope NOT IN (2,5)
                        )
                        AND sp_environment  = v_environment_id
                        AND sp_tenant       = v_tenant_id;

                        UPDATE  virtual_ip
                        SET     vip_server_pool = v_sp_id
                        WHERE   vip_id          = v_vip_id;

                        EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                v_sp_id := NULL;

                                IF (TRIM(rec."Default Pool") IS NOT NULL)
                                THEN
                                    DBMS_OUTPUT.PUT_LINE
                                    (
                                        RPAD(rec.row_nr, 5, ' ') ||
                                        RPAD(j."country", 3, ' ') ||
                                        RPAD(k."environment", 8, ' ') ||
                                        rec."Default Pool" || '   ' ||
                                        rec."Tenant"
                                    );
                                END IF;
                    END;

                    -- Get Server Pools for Country Specific
                    BEGIN
                        SELECT  sp_id
                        INTO    v_sp_id
                        FROM    server_pools
                        WHERE   LOWER(sp_name)              = LOWER(REPLACE(rec."Default Pool", c_country_code, v_tem_code))
                                AND LOWER(sp_core_tenant)   = LOWER(REPLACE(rec."Tenant", c_country_code, v_tem_code))
                                AND sp_tenant               = v_tenant_id
                                AND sp_environment          = v_environment_id
                                AND sp_release              = c_release_id;

                        EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                v_sp_id := NULL;

                                -- If it is not an empty string then log the problematic row
                                IF (TRIM(rec."Default Pool") IS NOT NULL)
                                THEN
                                    DBMS_OUTPUT.PUT_LINE
                                    (
                                        RPAD(rec.row_nr, 5, ' ') ||
                                        RPAD(j."country", 3, ' ') ||
                                        RPAD(k."environment", 8, ' ') ||
                                        rec."Default Pool" || '   ' ||
                                        rec."Tenant"
                                    );
                                END IF;
                    END;

                    -- Get Location for Country Specific
                    BEGIN
                        SELECT  location_id
                        INTO    v_location_id
                        FROM    locations
                        WHERE   LOWER(location_name)       = LOWER(REPLACE(rec."Location Lab", c_location_code, j."country"))
                                OR LOWER(location_name)    = LOWER(REPLACE(rec."Location LabECX", c_location_code, j."country"))
                                OR LOWER(location_name)    = LOWER(REPLACE(rec."Location PreProd", c_location_code, j."country"))
                                OR LOWER(location_name)    = LOWER(REPLACE(rec."Location Prod", c_location_code, j."country"));

                        EXCEPTION
                            WHEN NO_DATA_FOUND THEN
                                IF (rec."Applicable Environments" = 'LITC')
                                THEN
                                    INSERT INTO locations VALUES (NULL, REPLACE(rec."Location Lab", c_location_code, j."country"))
                                    RETURNING location_id INTO v_location_id;
                                ELSIF (rec."Applicable Environments" = 'LAB')
                                THEN
                                    INSERT INTO locations VALUES (NULL, REPLACE(rec."Location LabECX", c_location_code, j."country"))
                                    RETURNING location_id INTO v_location_id;
                                ELSIF (rec."Applicable Environments" = 'PRE')
                                THEN
                                    INSERT INTO locations VALUES (NULL, REPLACE(rec."Location PreProd", c_location_code, j."country"))
                                    RETURNING location_id INTO v_location_id;
                                ELSIF (rec."Applicable Environments" = 'PRD')
                                THEN
                                    INSERT INTO locations VALUES (NULL, REPLACE(rec."Location Prod", c_location_code, j."country"))
                                    RETURNING location_id INTO v_location_id;
                                END IF;
                    END;

                    -- Insert VIP
                    INSERT INTO virtual_ip
                    (
                        vip_id,
                        vip_name,
                        vip_nsa_level,
                        vip_core_tenant,
                        vip_port,
                        vip_type,
                        vip_protocol_client,
                        vip_protocol_server,
                        vip_http_profile,
                        vip_ssl_profile_client,
                        vip_ssl_profile_server,
                        vip_vlan_tunnel_traffic,
                        vip_vlan_tunnel,
                        vip_snat,
                        vip_snat_pool,
                        vip_http_analytics,
                        vip_tcp_analytics,
                        vip_irules,
                        vip_default_persistence,
                        vip_firewall,
                        vip_old_name,
                        vip_end_point_group,
                        vip_ip_type,
                        vip_ipv4_address,
                        vip_ipv6_address,
                        vip_dscp,
                        vip_acc_one_connect_profile,
                        vip_blueprint_architect,
                        vip_ticket,
                        vip_last_modified,
                        vip_area,
                        vip_location,
                        vip_server_pool,
                        vip_adc,
                        vip_network_protocol,
                        vip_network_type,
                        vip_blueprint,
                        vip_release,
                        vip_release_origin,
                        vip_tenant,
                        vip_environment,
                        vip_scope
                    )
                    VALUES
                    (
                        NULL,
                        REPLACE(rec."Unique ID", c_country_code, v_tem_code),
                        rec."NSA Level",
                        REPLACE(rec."Tenant", c_country_code, v_tem_code),
                        rec."Ports",
                        rec."Type",
                        rec."Protocol Client",
                        rec."Protocol Server",
                        rec."HTTP Profile",
                        rec."SSL Profile (Client)",
                        rec."SSL Profile (Server)",
                        rec."VLAN and Tunnel Traffic",
                        rec."VLANs and Tunnels",
                        rec."SNAT",
                        rec."SNAT Pool",
                        rec."HTTP Analytics",
                        rec."TCP Analytics",
                        rec."iRules",
                        rec."Default Persistence",
                        rec."Firewall",
                        rec."Old VIP Name",
                        REPLACE(rec."EPG", c_country_code, v_tem_code),
                        rec."IP Type",
                        v_ip_address,
                        NULL,
                        rec."DSCP",
                        rec."Acc OneConnect Profile",
                        rec."Blueprint/Country Specific",
                        rec."ODEP Tickets",
                        SYSDATE(),
                        v_area_id,
                        v_location_id,
                        v_sp_id,
                        v_adc_id,
                        v_network_protocol_id,
                        v_network_type_id,
                        v_vip_id,
                        c_release_id,
                        v_release_origin_id,
                        v_tenant_id,
                        v_environment_id,
                        v_scope_id
                    );
                ELSIF (j."country" = 'Blueprint')
                THEN
                    FOR a IN (
                        SELECT  tenant_id, tenant_name
                        FROM    tenants
                        WHERE   tenant_name <> 'MT'
                                AND tenant_name <> 'Blueprint'
                                AND tenant_name <> 'PLACEHOLDER'
                    )
                    LOOP
                        -- Get Server Pools for Parent row
                        BEGIN
                            SELECT  DISTINCT sp_blueprint
                            INTO    v_sp_id
                            FROM    server_pools
                            WHERE   sp_blueprint IN
                            (
                                SELECT  sp_id
                                FROM    server_pools
                                WHERE   LOWER(sp_name)              = LOWER(rec."Default Pool")
                                        AND LOWER(sp_core_tenant)   = LOWER(rec."Tenant")
                                        AND sp_tenant               = 18
                                        AND sp_environment          = 5
                                        AND sp_release              = c_release_id
                                        AND sp_scope NOT IN (2,5)
                            )
                            AND sp_environment  = v_environment_id
                            AND sp_tenant       = a.tenant_id;

                            UPDATE  virtual_ip
                            SET     vip_server_pool = v_sp_id
                            WHERE   vip_id          = v_vip_id;

                            EXCEPTION
                                WHEN NO_DATA_FOUND THEN
                                    v_sp_id := NULL;

                                    IF (TRIM(rec."Default Pool") IS NOT NULL)
                                    THEN
                                        DBMS_OUTPUT.PUT_LINE
                                        (
                                            RPAD(rec.row_nr, 5, ' ') ||
                                            RPAD(a.tenant_name, 3, ' ') ||
                                            RPAD(k."environment", 8, ' ') ||
                                            rec."Default Pool" || '   ' ||
                                            rec."Tenant"
                                        );
                                    END IF;
                        END;
                        -- Get IP Address from different columns
                        CASE a.tenant_name
                            WHEN 'MT' THEN      v_ip_address := rec."Global";
                            WHEN 'SI' THEN      v_ip_address := rec."OBOSI";
                            WHEN '5A' THEN      v_ip_address := rec."5A";
                            WHEN 'SS' THEN      v_ip_address := rec."SS";
                            WHEN 'CP' THEN      v_ip_address := rec."CP";
                            WHEN 'AT' THEN      v_ip_address := rec."AT";
                            WHEN 'BE' THEN      v_ip_address := rec."BE";
                            WHEN 'CH' THEN      v_ip_address := rec."CH";
                            WHEN 'CL' THEN      v_ip_address := rec."CL";
                            WHEN 'CZ' THEN      v_ip_address := rec."CZ";
                            WHEN 'DE' THEN      v_ip_address := rec."DE";
                            WHEN 'HU' THEN      v_ip_address := rec."HU";
                            WHEN 'IE' THEN      v_ip_address := rec."IE";
                            WHEN 'NL' THEN      v_ip_address := rec."NL";
                            WHEN 'PL' THEN      v_ip_address := rec."PL";
                            WHEN 'RO' THEN      v_ip_address := rec."RO";
                            WHEN 'SK' THEN      v_ip_address := rec."SK";
                            WHEN 'UK' THEN      v_ip_address := rec."UK";
                            ELSE
                                v_ip_address := NULL;
                        END CASE;

                        -- Get Tenant Code
                        SELECT  tem_code
                        INTO    v_tem_code
                        FROM    tenant_environment_map
                        WHERE   tem_tenant              = a.tenant_id
                                AND tem_environment     = v_environment_id;

                        -- Get Server Pools for Blueprint
                        BEGIN
                            SELECT  sp_id
                            INTO    v_sp_id
                            FROM    server_pools
                            WHERE   LOWER(sp_name)              = LOWER(REPLACE(rec."Default Pool", c_country_code, v_tem_code))
                                    AND LOWER(sp_core_tenant)   = LOWER(REPLACE(rec."Tenant", c_country_code, v_tem_code))
                                    AND sp_tenant               = a.tenant_id
                                    AND sp_environment          = v_environment_id
                                    AND sp_release              = c_release_id
                                    AND sp_scope NOT IN (2,5);

                            EXCEPTION
                                WHEN NO_DATA_FOUND THEN
                                    v_sp_id := NULL;

                                    -- If it is not an empty string then log the problematic row
                                    IF (TRIM(rec."Default Pool") IS NOT NULL)
                                    THEN
                                        DBMS_OUTPUT.PUT_LINE
                                        (
                                            RPAD(rec.row_nr, 5, ' ') ||
                                            RPAD(a.tenant_name, 3, ' ') ||
                                            RPAD(k."environment", 8, ' ') ||
                                            rec."Default Pool" || '   ' ||
                                            rec."Tenant"
                                        );
                                    END IF;
                        END;

                        -- Get Location for Country Specific
                        BEGIN
                            SELECT  location_id
                            INTO    v_location_id
                            FROM    locations
                            WHERE   LOWER(location_name)       = LOWER(REPLACE(rec."Location Lab", c_location_code, a.tenant_name))
                                    OR LOWER(location_name)    = LOWER(REPLACE(rec."Location LabECX", c_location_code, a.tenant_name))
                                    OR LOWER(location_name)    = LOWER(REPLACE(rec."Location PreProd", c_location_code, a.tenant_name))
                                    OR LOWER(location_name)    = LOWER(REPLACE(rec."Location Prod", c_location_code, a.tenant_name));

                            EXCEPTION
                                WHEN NO_DATA_FOUND THEN
                                    IF (rec."Applicable Environments" = 'LITC')
                                    THEN
                                        INSERT INTO locations VALUES (NULL, REPLACE(rec."Location Lab", c_location_code, a.tenant_name))
                                        RETURNING location_id INTO v_location_id;
                                    ELSIF (rec."Applicable Environments" = 'LAB')
                                    THEN
                                        INSERT INTO locations VALUES (NULL, REPLACE(rec."Location LabECX", c_location_code, a.tenant_name))
                                        RETURNING location_id INTO v_location_id;
                                    ELSIF (rec."Applicable Environments" = 'PRE')
                                    THEN
                                        INSERT INTO locations VALUES (NULL, REPLACE(rec."Location PreProd", c_location_code, a.tenant_name))
                                        RETURNING location_id INTO v_location_id;
                                    ELSIF (rec."Applicable Environments" = 'PRD')
                                    THEN
                                        INSERT INTO locations VALUES (NULL, REPLACE(rec."Location Prod", c_location_code, a.tenant_name))
                                        RETURNING location_id INTO v_location_id;
                                    END IF;
                        END;

                        -- Insert VIP
                        INSERT INTO virtual_ip
                        (
                            vip_id,
                            vip_name,
                            vip_nsa_level,
                            vip_core_tenant,
                            vip_port,
                            vip_type,
                            vip_protocol_client,
                            vip_protocol_server,
                            vip_http_profile,
                            vip_ssl_profile_client,
                            vip_ssl_profile_server,
                            vip_vlan_tunnel_traffic,
                            vip_vlan_tunnel,
                            vip_snat,
                            vip_snat_pool,
                            vip_http_analytics,
                            vip_tcp_analytics,
                            vip_irules,
                            vip_default_persistence,
                            vip_firewall,
                            vip_old_name,
                            vip_end_point_group,
                            vip_ip_type,
                            vip_ipv4_address,
                            vip_ipv6_address,
                            vip_dscp,
                            vip_acc_one_connect_profile,
                            vip_blueprint_architect,
                            vip_ticket,
                            vip_last_modified,
                            vip_area,
                            vip_location,
                            vip_server_pool,
                            vip_adc,
                            vip_network_protocol,
                            vip_network_type,
                            vip_blueprint,
                            vip_release,
                            vip_release_origin,
                            vip_tenant,
                            vip_environment,
                            vip_scope
                        )
                        VALUES
                        (
                            NULL,
                            REPLACE(rec."Unique ID", c_country_code, v_tem_code),
                            rec."NSA Level",
                            REPLACE(rec."Tenant", c_country_code, v_tem_code),
                            rec."Ports",
                            rec."Type",
                            rec."Protocol Client",
                            rec."Protocol Server",
                            rec."HTTP Profile",
                            rec."SSL Profile (Client)",
                            rec."SSL Profile (Server)",
                            rec."VLAN and Tunnel Traffic",
                            rec."VLANs and Tunnels",
                            rec."SNAT",
                            rec."SNAT Pool",
                            rec."HTTP Analytics",
                            rec."TCP Analytics",
                            rec."iRules",
                            rec."Default Persistence",
                            rec."Firewall",
                            rec."Old VIP Name",
                            REPLACE(rec."EPG", c_country_code, v_tem_code),
                            rec."IP Type",
                            v_ip_address,
                            NULL,
                            rec."DSCP",
                            rec."Acc OneConnect Profile",
                            rec."Blueprint/Country Specific",
                            rec."ODEP Tickets",
                            SYSDATE(),
                            v_area_id,
                            v_location_id,
                            v_sp_id,
                            v_adc_id,
                            v_network_protocol_id,
                            v_network_type_id,
                            v_vip_id,
                            c_release_id,
                            v_release_origin_id,
                            a.tenant_id,
                            v_environment_id,
                            v_scope_id
                        );
                    END LOOP;   -- End of loop a
                END IF;
            END LOOP;   -- End of loop k
        END LOOP;   -- End of loop j
    END LOOP;   -- End of loop rec1
END;
